/*EJERCICIOS ALEATORIOS*/

/*Write a query, based on the product and order details tables, that displays the
product type (a calculated field – will be defined later), the number of items
ordered and the LineTotal for each type of product.
Product type definition:
ProductType is a calculated field, designated by the two left characters in the
ProductNumber column.

Continuing from the previous question, in order to understand each product type,
link the data to the Production.ProductSubcategory table. Start out from the
previous query and add the Name column from the Subcategories table.*/

--------------------USANDO JOINS
select
	LEFT (p.ProductNumber,2) as ProdyctType,
	s.[Name],
	SUM(d.OrderQty) as NoOfItems,
	SUM(d.LineTotal) as SumLineTotal
from Sales.SalesOrderDetail as d
	left join Production.Product as p
		on d.ProductID = p.ProductID
	join Production.ProductSubcategory as s
		on s.ProductSubcategoryID = p.ProductSubcategoryID
group by LEFT (p.ProductNumber,2),s.[Name]
order by 2

/*Write a query that shows the ProductID, Name, ListPrice, ProductSubcategoryID
and the difference between the list price and the average list price of all the
products in the same sub-category for each product in the Production.Product
table.
Sort it by subcategory, in ascending order.
Include in the calculation of the average list price only products with a ListPrice
and with ProductSubcategoryID that is not NULL*/

select
	t1.ProductSubcategoryID,
	p.ProductID,
	p.[Name],
	p.ListPrice,
	(p.ListPrice - t1.average) as Diff
from Production.Product as p
	join (select 
				ProductSubcategoryID,
				AVG(ListPrice) as average
			from Production.Product 
			where ProductSubcategoryID is not NULL
			group by ProductSubcategoryID) as t1
		on p.ProductSubcategoryID = t1.ProductSubcategoryID
group by t1.ProductSubcategoryID,p.ProductID,p.[Name],	p.ListPrice,(p.ListPrice - t1.average)
order by 1

/*Write a query that shows the order number (SalesOrderID), order date
(OrderDate) and total for payment (SubTotal), for orders generated on the dates
10/01/2012 to 10/02/2012, inclusive . Base your answer on the Order title table.
* The dates in the question are written in dd/mm/yyyy format*/

select 
	SalesOrderID,
	OrderDate,
	SubTotal
from Sales.SalesOrderHeader
where OrderDate between '01/10/2012' and '02/10/2012'

/*"Write a query that shows the following columns from the Production.Product
table: ProductID, [Name], ProductNumber, Color"*/

select ProductID, [Name], ProductNumber, Color
from Production.Product

/*"Write a query that shows the following columns from the Person.Person table:
BusinessEntityID, First name, Middle name and Last name"*/

select BusinessEntityID, FirstName, MiddleName, LastName
from Person.Person

/*"Write a query that shows the average number of orders for all the years, for all the
salespeople. Analyze only the data that has a value in the SalesPersonID column:
a. Define a CTE named ""Sales_CTE"", which is based on the Order header table,
and contains the following columns SalesPersonID, the amount of orders
generated by the salesperson.
b. Write a query based on the CTE that displays the average order quantity of
all the salespeople"*/

with Sales_CTE (SalesPersonID,NoOfOrders)
	as (select 
			   SalesPersonID,
			   COUNT(SalesOrderNumber) as NoOfOrders
		from Sales.SalesOrderHeader
		where SalesPersonID is not NULL
		group by SalesPersonID)

select  AVG(NoOfOrders) as Average
from Sales_CTE

/*Write a query that shows all the columns from the Purchasing.Vendor table*/

select*
from Purchasing.Vendor

/*"Write a query that returns the Product ID, Product name and Margin from the
Production.Product table"*/

select 
		ProductID, 
		[Name], 
		(ListPrice-StandardCost) as Margin,
		((ListPrice-StandardCost)/StandardCost)*100 as MarginPct
from Production.Product
where ListPrice <>0 and
		StandardCost <>0
order by MarginPct desc

/*"Write a query that returns the Product ID, List price and List price+12% (a
calculated column) from the Production.Product table. Display only the products
with a list price that is different than 0.
*In the presentation from today’s lesson, you will find the formula for calculating a
percentage change"*/

select
	ProductID,
	[Name],
	ListPrice,
	(ListPrice*1.12) as PrecioIVA12
from Production.Product
where ListPrice <>0
order by PrecioIVA12 desc

/*"Write a query that returns the Order number (SalesOrderID), Order date and the
Order year (calculated column) from the Sales.SalesOrderHeader table"*/

select 
	SalesOrderID,
	OrderDate,
	YEAR(OrderDate) as Año
from Sales.SalesOrderHeader

/*"Write a query that returns the First name, Middle name and Last name of the
people with the Middle name J in the Person.Person table"*/

select
	FirstName,
	MiddleName,
	LastName
from Person.Person
where MiddleName like 'J%'

/*"Write a query that returns the Employee number (BusinessEntityID), Hire Date and
Year of birth (a column calculated by function on the BirthYear column) from the
HumanResources.Employee table. Sort the results according to Hire date from the
newest employee (will appear first) to the oldest (will appear last)

Continuing from the previous question, add a filter to display the data only of
employees that began working in 2010.
Instruction:
In which section of the query are the data filtered?
What is the value returned by the function YEAR()?"*/

select
	BusinessEntityID,
	HireDate,
	YEAR(BirthDate) as YearOfBirth
from HumanResources.Employee
where YEAR(HireDate)=2010
order by HireDate desc

/*"Write a query that returns the BusinessEntityID, Last name and First name from the
Person.Person table. Sort the results according to Last name in descending order,
and secondary sort according to First name in descending order"*/

select
	BusinessEntityID,
	LastName,
	FirstName
from Person.Person
order by LastName desc, FirstName desc

/*"Write a query that returns the BusinessEntityID, Last name and First name from the
Person.Person table. Sort the results according to Last name in ascending order,
and secondary sort according to First name in descending order"*/

select
	BusinessEntityID,
	LastName,
	FirstName
from Person.Person
order by LastName asc, FirstName desc

/*"Write a query that returns the BusinessEntityID, Last name and First name from the
Person.Person table. Sort the results according to Last name in ascending order"*/

select
	BusinessEntityID,
	LastName,
	FirstName
from Person.Person
order by LastName asc


/*"Write a query that returns all the product details from the Production.Product
table for all the products with the Colors Silver or Black"*/

select*
from Production.Product
where Color = 'Silver' or
		Color = 'Black'

/*"Write a query that returns all the orders in the Sales.SalesOrderHeader table that
were issued on 31/07/2013 (OrderDate)"*/

select *
from Sales.SalesOrderHeader
where OrderDate = '2013-07-31'

/*"Write a query that returns all the employee details from the
HumanResources.Employee table for all the employees in the following jobs:
Research and Development Engineer
Design Engineer
Display the Employee code (BusinessEntityID), Job title (JobTitle) and User ID
(LoginID)"*/

select BusinessEntityID, JobTitle, LoginID
from HumanResources.Employee
where JobTitle = 'Research and Development Engineer' or
		JobTitle = 'Design Engineer'

/*"Write a query that returns a single list of all customer numbers from the
Sales.Customer table and sales people from the Sales.SalesPerson table.
Check the names of the appropriate columns in the table"*/

select CustomerID, 'C' as Identificador
from Sales.Customer
union
select BusinessEntityID, 'S'
from Sales.SalesPerson

/*"Write a query that ranks each row in the Sales.SalesOrderDetail table, and displays
the following data:
SalesOrderID, OrderQty, Group Code (details below).
The Group code will be based on the value that appears in the Order Quantity
column, and the following key:
a. up to one item = D
b. 2-5 items (inclusive) = C
c. 6-30 items (inclusive) = B
d. more than 30 = A

Challenge question (Continuation from the previous question)
The previous query produced a list of all the order records with the rank of each
record according to the quantity of items ordered.
Now, we want to refine the display to see how many times each group code
appears. To do this, write a query that shows how many times each group code (A,
B, C, D –according to the data in the previous question) appears in the
Sales.SalesOrderDetail table"*/

select
	SalesOrderID, 
	OrderQty,
	case	
		when OrderQty=1 then 'D'
		when OrderQty between 2 and 5 then 'C'
		when OrderQty between 6 and 30 then 'B'
		else 'A'
	end as GroupCode
from Sales.SalesOrderDetail
order by GroupCode
-----------------------------------------
select
	case	
		when OrderQty=1 then 'D'
		when OrderQty between 2 and 5 then 'C'
		when OrderQty between 6 and 30 then 'B'
		else 'A'
	end as GroupCode,
	COUNT(case	
			when OrderQty=1 then 'D'
			when OrderQty between 2 and 5 then 'C'
			when OrderQty between 6 and 30 then 'B'
			else 'A'
		  end) as Conteo

from Sales.SalesOrderDetail
group by (case	
			when OrderQty=1 then 'D'
			when OrderQty between 2 and 5 then 'C'
			when OrderQty between 6 and 30 then 'B'
			else 'A'
		 end)
order by GroupCode

/*"Write a query that links the Sales.SalesOrderHeader table to the
Sales.SalesOrderDetail table and displays the following columns: SalesOrderID,
OrderDate, ProductID, and LineTotal.
Display only the details of the orders from 2012"*/

select
	h.SalesOrderID,
	h.OrderDate,
	d.ProductID,
	d.LineTotal
from Sales.SalesOrderHeader as h
	join Sales.SalesOrderDetail as d
		on h.SalesOrderID = d.SalesOrderID
where YEAR(OrderDate)=2012

/*"Write a query that links the Sales.SalesOrderHeader table to the
Sales.SalesOrderDetail table and displays all the columns from both tables"*/

select*
from Sales.SalesOrderHeader as h
	join Sales.SalesOrderDetail as d
		on h.SalesOrderID = d.SalesOrderID

/*"Write a query that links the Sales.SalesOrderDetail table to the Production.Product
table.
a. Display the following columns: SalesOrderID, ProductID, and Name.
Display only the details of the products for which the color is ""Null"".
b. Must the Color field be selected in the Select section In order to filter the
data according to color?
c. If the columns are not displayed, how can the correctness of the results be
verified?"*/

select
	d.SalesOrderID,
	d.ProductID,
	p.[Name]
from Sales.SalesOrderDetail as d
	join Production.Product as p
		on d.ProductID = p.ProductID
where p.Color is NULL

/*"Write a query that links the Sales.SalesOrderDetail table to the Production.Product
table and displays the following columns: SalesOrderID, ProductID, Name,
ProductNumber, and LineTotal."*/

select
	d.SalesOrderID, 
	d.ProductID, 
	p.[Name],
	p.ProductNumber, 
	d.LineTotal
from Sales.SalesOrderDetail as d
	join Production.Product as p
		on d.ProductID = p.ProductID

/*"Write a query that links between the Sales.SalesOrderDetail table, the
Production.Product table and the Sales.SalesOrderHeader table and displays the
following columns: SalesOrderID, OrderDate, ProductID, Color and LineTotal"*/

select
	d.SalesOrderID, 
	h.OrderDate, 
	d.ProductID, 
	p.Color,
	d.LineTotal
from Sales.SalesOrderDetail as d
	left join Sales.SalesOrderHeader as h
		on d.SalesOrderID= h.SalesOrderID
	left join Production.Product as p
		on d.ProductID = p.ProductID

/*"Write a query that displays, the product code, price per item after discount
(calculated column), and the difference between the LineTotal of each order
record and the average of the LineTotals (a calculated column, named
DiffFromAVG) for all the records in the order details table.

Continuing from the previous question, write a query that displays the product
codes and names of all the products in the products table that were ordered at
least once in 2013.

Continuing from the previous question, write a query that displays the product
codes and names of all the products in the product table where the total quantity
ordered in 2013 was at least 300 units"*/

select
	ProductID,
	UnitPrice*(1-UnitPriceDiscount) as PriceAfterDesc,
	(LineTotal - (select AVG(LineTotal)
				 from Sales.SalesOrderDetail)) as DiffFromAVG
from Sales.SalesOrderDetail
order by DiffFromAVG desc
------------------------------------------
select
	d.ProductID,
	p.[Name]
from Sales.SalesOrderDetail as d
	join Production.Product as p
		on d.ProductID = p.ProductID
	join Sales.SalesOrderHeader as h
		on d.SalesOrderID = h.SalesOrderID
where YEAR(h.OrderDate)=2013
group by d.ProductID,p.[Name]
--------------------------------------------
select
	d.ProductID,
	p.[Name]
from Sales.SalesOrderDetail as d
	join Production.Product as p
		on d.ProductID = p.ProductID
	join Sales.SalesOrderHeader as h
		on d.SalesOrderID = h.SalesOrderID
where YEAR(h.OrderDate)=2013 
group by d.ProductID,p.[Name]
having SUM(d.OrderQty)>300


/*"Write a query that displays the SubTotal of every order from the Order Header
table according to the following rules:
a. All orders under 1000 → Low
b. All orders of 1000 or more, but less than 3000 → Good
c. All other orders → Excellent

Challenge question:
Continuing from the previous question, now display how many orders of each
price type there are"*/

select
	SalesOrderID,
	case	
		when SubTotal<1000 then 'Low'
		when SubTotal>=1000 and SubTotal<3000 then 'Good'
		else 'Excelent'
	end as Category
from Sales.SalesOrderHeader
------------------------------------
select
	case	
		when SubTotal<1000 then 'Low'
		when SubTotal>=1000 and SubTotal<3000 then 'Good'
		else 'Excelent'
	end as Category,
	COUNT(*)
from Sales.SalesOrderHeader
group by 
	case	
		when SubTotal<1000 then 'Low'
		when SubTotal>=1000 and SubTotal<3000 then 'Good'
		else 'Excelent'
	end

/*Write a query that displays the quantity of products ordered each year*/

select
	YEAR(h.OrderDate) as Año,
	d.ProductID,
	SUM(d.OrderQty) as NoOfProducts
from Sales.SalesOrderDetail as d
	join Sales.SalesOrderHeader as h
		on d.SalesOrderID = h.SalesOrderID
group by YEAR(h.OrderDate),d.ProductID
order by 1 asc, 3 desc
----------------------------------------------
select
	YEAR(h.OrderDate) as Año,
	SUM(d.OrderQty) as NoOfProducts
from Sales.SalesOrderDetail as d
	join Sales.SalesOrderHeader as h
		on d.SalesOrderID = h.SalesOrderID
group by YEAR(h.OrderDate)

/*"Write a query that displays the ProductID, the ListPrice, and the average list price
of all the items in the product table

Continuing from the previous question, name the column with the average list
price ""AverageListPrice"".
In addition, make sure that the average price list price is calculated only with the
items with a list price greater than 0, so as not to skew the result"*/

------------------------------Usando Window Function
select 
	ProductID,
	ListPrice,
	AVG(ListPrice) over () as AVGListPrice 
from Production.Product
where ListPrice <>0
order by ListPrice desc

-----------------------------Usando Querys Anidados
select	ProductID,
		ListPrice,
		(select avg (ListPrice)
		 from Production.Product
		 where ListPrice <>0) as AVGListPrice
from Production.Product
where ListPrice <>0
order by ListPrice desc

/*"Write a query that displays the ProductID for the products that meet at least one of
the following requirements. If the item meets more than one requirement, the
product code should be displayed only once.
a. The product was ordered (Sales.SalesOrderDetail) at a unit price after
discount (calculated using the existing columns) greater than 1800, and the
CarrierTrackingNumber starts with the letters 4E.
b. The order record is for a quantity of product greater than 10 units and the
tracking number ends with the number 4"*/

select distinct ProductID
from Sales.SalesOrderDetail
where (UnitPrice*(1-UnitPriceDiscount)>1800 and
	  CarrierTrackingNumber like '4E%')
	  or
	  (OrderQty>10 and
	  CarrierTrackingNumber like '%4')
order by 1 desc
-------------------------------Usando Union
select* distinct ProductID
from Sales.SalesOrderDetail 
where	(LineTotal/OrderQty) > 1800 and 
		CarrierTrackingNumber like '4E%'
union 
select distinct ProductID
from Sales.SalesOrderDetail 
where	OrderQty > 10 and 
		CarrierTrackingNumber like '%4'
order by 1 desc

/*"Write a query that displays the ProductID and the Item Color from the
Production.Product table for the items with the color identical to that of item
number 741"*/

select ProductID, Color
from Production.Product
where Color = (select Color
				from Production.Product
				where ProductID = 741)

/*"Write a query that displays the ProductID and LineTotal only for orders from 2011
in which the total paid (LineTotal) is greater than 1,000. (Calculate the date from
the OrderDate column.)"*/


select	d.ProductID, 
		d.LineTotal
from Sales.SalesOrderDetail as d
	left join Sales.SalesOrderHeader as h
		on d.SalesOrderID = h.SalesOrderID
where YEAR(h.OrderDate) = 2011 and
		LineTotal > 1000

/*"Write a query that displays the product details of the products with the color NULL
from the Production.Product table . Check the table for the appropriate column
name"*/

select *
from Production.Product
where Color is NULL

/*"Write a query that displays the product code (ProductID), the Product name and
the subcategory code (ProductSubcategoryID) from the Production.Product table,
Display the data only for products for which the subcategory is one of the
following: 2,5,9,14,15,30.
Sort the data by subcategory"*/

select
	ProductID, [Name], ProductSubcategoryID
from Production.Product
where ProductSubcategoryID in (2,5,9,14,15,30)
order by ProductSubcategoryID

/*"Write a query that displays the product code (ProductID), the product name and
the Product number for all the products in the Production.Product table that end
with the number “8”"*/

select ProductID, [Name], ProductNumber
from Production.Product
where ProductNumber like '%8'

/*"Write a query that displays the product code (ProductID), the product name and
the Product number for all the products in the Production.Product table that begin
with the letters “C”, “B” or “E”"*/

select ProductID, [Name], ProductNumber
from Production.Product
where [Name] like 'C%' or
	  [Name] like 'B%' or
	  [Name] like 'E%'
---------------------------------------
select ProductID, [Name], ProductNumber
from Production.Product
where [Name] like '[C,B,E]%'

/*"Write a query that displays the product code (ProductID), the product name and
the Product number for all the products in the Production.Product table that begin
with the letter “C”"*/

select ProductID, [Name], ProductNumber
from Production.Product
where [Name] like 'C%'

/*"Write a query that displays the product code (ProductID) and product name from
the Production.Product table for all the products that have the word “Red” in their
name and their List Price is between 600 and 1,500, inclusive"*/

select ProductID, [Name]
from Production.Product
where [Name] like '%red%' and
		ListPrice between 600 and 1500

/*"Write a query that displays the product code (ProductID) and product cost
(StandardCost) from the Production.Product table for products with a cost
between 100 and 500"*/

select ProductID, StandardCost
from Production.Product
where StandardCost between 100 and 500

/*"Write a query that displays the orders from the Sales.SalesOrderHeader table that
have a SubTotal lower than the average of the SubTotals of all the orders. Display
only the order number.

Continuing from the previous question, display how many orders meet the
condition"*/

select SalesOrderID
from Sales.SalesOrderHeader
where SubTotal < (select AVG(Subtotal)
				  from Sales.SalesOrderHeader)
-------------------------------------------------
select COUNT(SalesOrderID) as 'Conteo'
from Sales.SalesOrderHeader
where SubTotal < (select AVG(Subtotal)
				  from Sales.SalesOrderHeader)

/*"Write a query that displays the Name of the product from the Production.Product
table that has the word ""Wheels"" in its sub-category name in the
Production.ProductSubcategory table."*/

select p.[Name], s.[Name] as 'SubCategoryName'
from Production.Product as p
	left join Production.ProductSubcategory as s
		on p.ProductSubcategoryID = s.ProductSubcategoryID
where s.[Name] like '%wheels%'
--------------------------------USANDO EXISTS
select	p.[Name]
from Production.Product p
where exists  ( select *
				from Production.ProductSubcategory sb
				where sb.ProductSubcategoryID = p.ProductSubcategoryID
					and sb.[Name] ='Wheels'
				)

/*"Write a query that displays the list of Colors of the products from the
Production.Product table, where each color appears only once"*/

select distinct Color
from Production.Product


/*"Write a query that displays the Last names from the Person.Person table for
people whose last name appears 100 times or more in the Person.Person table"*/

select LastName, COUNT(LastName) as 'Conteo'
from Person.Person
group by LastName
having COUNT(LastName) >= 100
order by COUNT(LastName) desc


/*"Write a query that displays the first name, last name, JobTitle and the number of
employees in that department from the HumanResources.Employee table."*/

--------------------------------USANDO WINDOW FUNCTION
select p.FirstName, p.LastName, h.JobTitle,
	   COUNT(*) over (partition by JobTitle) as 'Cuenta'
from HumanResources.Employee as h
	left join Person.Person as p
		on h.BusinessEntityID = p.BusinessEntityID
--------------------------------USANDO QUERYS ANIDADOS
select  p.LastName,
		p.FirstName,
		e.JobTitle,
		(	select count (*)
			from HumanResources.Employee
			where JobTitle = e.JobTitle) as AmountInDepartment
		
from HumanResources.Employee e
	left join Person.Person p
		on p.BusinessEntityID = e.BusinessEntityID

--option B
select  p.LastName,
		p.FirstName,
		e.JobTitle,
		dc.AmountInDepartment
		
from HumanResources.Employee e
	left join Person.Person p
		on p.BusinessEntityID = e.BusinessEntityID
	join (	select JobTitle,
					count (*) as AmountInDepartment
			from HumanResources.Employee
			group by JobTitle 
		  ) dc
		  on dc.JobTitle = e.JobTitle

/*"Write a query that displays the data of all the people from the Person.Person table
who ordered a product in 2013."*/

----------------USANDO JOINS
select distinct FirstName, LastName
from Person.Person as p
	join Sales.Customer as c
		on p.BusinessEntityID = c.PersonID
			join Sales.SalesOrderHeader as h
				on c.CustomerID = h.CustomerID
where YEAR(h.OrderDate) = 2013
order by 1,2
-------------------USANDO SUB QUERYS
select FirstName, LastName
from Person.Person 
where BusinessEntityID in 
	(select PersonID
	 from Sales.Customer
	 where CustomerID in
		(select CustomerID
		 from Sales.SalesOrderHeader
		 where YEAR(OrderDate) = 2013
		 )
	)
order by 1,2
-------------------------------------
select FirstName, LastName
from Person.Person as p
	join (select c.PersonID, h.OrderDate
		  from Sales.Customer as c
			join Sales.SalesOrderHeader as h
				on c.CustomerID = h.CustomerID) as t
	on p.BusinessEntityID = t.PersonID
where YEAR(t.OrderDate) = 2013
order by 1,2
------------------------------
select *
from Person.Person p 
where exists (
				select * 
				from Sales.SalesOrderHeader h
					join Sales.Customer c
						on c.CustomerID = h.CustomerID
				where	p.BusinessEntityID = c.PersonID 
						and YEAR (OrderDate) = 2013
			 )

/*"Write a query that displays the data from the Sales.SalesOrderDetail table where
the total per line (LineTotal) is between 1,000 and 5,000 (use “Between”) and the
Carrier Tracking Number contains the sequence F89. Sort the results by Unit price
in ascending order"*/

select *
from sales.SalesOrderDetail
where LineTotal between 1000 and 5000 and
	  CarrierTrackingNumber like '%F89%'
order by UnitPrice asc


/*"Write a query that displays the Customer ID and total purchase amount (SubTotal)
for customers who purchased a total amount over 100,000 in 2012 (all the orders
in that year). Base your answer on the Sales.SalesOrderHeader table."*/

select CustomerID, 
	   SUM(SubTotal) as TotalAmount
from Sales.SalesOrderHeader
where YEAR(OrderDate) = 2012
group by CustomerID
having SUM(SubTotal) > 100000 

/*"Write a query that displays the customer details of each order in the
Sales.SalesOrderHeader table, The following columns should be displayed:
SalesOrderID, Order Date, CustomerID, First Name, Last Name, and SubTotal.
Sort the data by last name and then by first name"*/

select h.SalesOrderID, h.OrderDate, h.CustomerID, p.FirstName, p.LastName, SubTotal
from Sales.SalesOrderHeader as h
	left join Sales.Customer as c
		on c.CustomerID = h.CustomerID
			left join Person.Person as p
				on p.BusinessEntityID = c.PersonID
order by LastName, FirstName

/*"Write a query that displays the customer code and the highest order amount
(SubTotal) in the years 2012 and 2013 for each customer in the
Sales.SalesOrderHeader table. Display only sales that have values both in the
Sales Person column, and in the Purchase Order Number column. Check the table
for the appropriate column names"*/

select CustomerID, MAX(SubTotal) as MaxOrder
from Sales.SalesOrderHeader
where YEAR(OrderDate) in (2012,2013) and
		SalesPersonID is not null and
		PurchaseOrderNumber is not null
group by CustomerID

/*"Write a query that displays the BusinessEntityID and Gender of all the employees
in the employee table whose gender is the same as the gender of the employee
with code 38

Continuing from the previous question, add the first and last names of the
employees from the Persons table. Use the diagram or ERD to check which
column links the tables"
*/

select BusinessEntityID,Gender
from HumanResources.Employee
where Gender = (select Gender
			   from HumanResources.Employee
			   where BusinessEntityID = 38)
----------------------------------------------
select e.BusinessEntityID,p.FirstName, p.LastName, e.Gender
from HumanResources.Employee as e
	left join Person.Person as p
		on p.BusinessEntityID = e.BusinessEntityID
where Gender = (select Gender
			   from HumanResources.Employee
			   where BusinessEntityID = 38)

/*"Write a query that displays the amount of orders per product color in 2013, sorted
from highest to lowest.
Use a CTE to simplify the query:  
a. Define a CTE named ""Sales_CTE"", which contains the following columns:
Order number, OrderDate, ProductID and OrderQty.
b. Use the CTE and the Product table to display the amount of orders per
product color in 2013, sorted from highest to lowest

Note: The query could also be solved without using a CTE. However, it helps
to keep the code clean, tidy and legible when splitting the queries into parts"*/

------Usando un query normal
select p.Color, SUM(d.OrderQty) as AmountOrders
	 from sales.SalesOrderDetail as d
		left join Sales.SalesOrderHeader as h
			on d.SalesOrderID = h.SalesOrderID
		left join Production.Product as p
			on d.ProductID = p.ProductID
where YEAR(h.OrderDate) = 2013
group by p.Color
order by 2 desc

------Usando CTE
with Sales_CTE 
	as 
	(
		select d.SalesOrderID, h.OrderDate, d.ProductID, d.OrderQty
		from Sales.SalesOrderDetail as d
			left join Sales.SalesOrderHeader as h
				on d.SalesOrderID = h.SalesOrderID
	)

select p.Color, SUM(s.OrderQty) as AmountOrders
from Sales_CTE as s
	join Production.Product as p
		on s.ProductID = p.ProductID
where YEAR(s.OrderDate) = 2013
group by p.Color
order by 2 desc

/*"Write a query that displays the amount of orders made by each customer
(CustomerID). Use the Sales.SalesOrderHeader table.
Instruction: Write a query that groups the data in the Sales.SalesOrderHeader
table according to Customer ID and displays the Customer ID and a count of the
number of orders. Give a significant name to the column with the number of
orders per customer

Continuing from the previous question, sort the query results according to the
number of orders from the highest to the lowest

Continuing from the previous question, add code so that the query will run only
on the orders with Order Date 2013"*/

select CustomerID, COUNT(*) as NoOfOrders
from Sales.SalesOrderHeader
where YEAR(OrderDate) = 2013
group by CustomerID
order by 2 desc

/*"Write a query that displays the 5 first Department names from the
HumanResources.Department table"*/

select top 5 [Name]
from HumanResources.Department

/*"Write a query that displays descriptive statistics for each Color from the
Production.Product table : quantity of items of the same color, maximum list price,
average list price, minimum list price,
Instruction: Write a query that retrieves data from the Production.Product table,
and groups it by Color field. Display the color code, and the appropriate
aggregate functions. Be sure to give significant, comprehensible names to the
calculated columns.*/

select 
	Color,
	COUNT(*) as QtyByColor,
	MAX(ListPrice) as MaxListPrice,
	MIN(ListPrice) as MinListPrice,
	AVG(ListPrice) as AVGListPrice
from Production.Product
group by Color


/*Continuing from the previous question, examine the results. Note that there are
colors for which the minimum price is 0.
Since a product cannot have a price to the customer of 0, copy the query and add
a filter to it, so that lines with List Price 0 will not be included in the calculation*/

select 
	Color,
	COUNT(*) as QtyByColor,
	MAX(ListPrice) as MaxListPrice,
	MIN(ListPrice) as MinListPrice,
	AVG(ListPrice) as AVGListPrice
from Production.Product
where ListPrice > 0
group by Color

/*Continuing from the 2 previous questions, use the mouse to select the codes of
both queries and run them together. Note that both results will appear in the
Results window. These are the corresponding query results.
Examine the Average Price column for the colors that had a minimum price of 0.
Are there discrepancies in the average?
Pay attention to this is a very important point!
Sometimes we must filter out data that skew the calculations. Therefore, it is
important to verify the data and the results.
This is a significant part of the analyst’s job: critical thinking"*/

/*"Write a query that displays all the order details from the Sales.SalesOrderHeader
table for the orders that have data in the Sales Person ID column"*/

select *
from Sales.SalesOrderHeader
where SalesPersonID is not null

/*"Write a query that displays all the names of the products in the products table that
were ordered at least once (Sales.SalesOrderDetail)"*/

select [Name]
from Production.Product 
where ProductID in (select ProductID		
					from Sales.SalesOrderDetail)
----------------------otra forma

select distinct [Name]
from Production.Product as p
	 join Sales.SalesOrderDetail as d
		on p.ProductID = d.ProductID
----------------------con exists

select	ProductID,	
		[Name]
from Production.Product p
where exists (select ProductID 
			  from Sales.SalesOrderDetail d
			  where p.ProductID = d.ProductID)

/*"Write a query that displays all the details of the 20 products with the highest cost
(StandardCost) from the Production.Product table"*/

select top 20 *
from Production.Product
order by StandardCost desc

/*"Write a query that displays all the columns from the Sales.SalesPerson table but
displays only the salespeople who have sold at least one product with the word
""frame"" in its model name."*/

select distinct sp.BusinessEntityID
from Sales.SalesPerson as sp
	left join Sales.SalesOrderHeader as h
		on sp.BusinessEntityID = h.SalesPersonID
			left join Sales.SalesOrderDetail as d
				on h.SalesOrderID = d.SalesOrderID
					left join Production.Product as p
						on d.ProductID = p.ProductID
where d.ProductID in (select p.ProductID
						from Production.Product as p
							join Production.ProductModel as m
								on p.ProductModelID = m.ProductModelID
						where m.[Name] like '%frame%')




---------------Separando Querys
select p.ProductID
from Production.Product as p
	join Production.ProductSubcategory as s
		on p.ProductSubcategoryID = s.ProductSubcategoryID
where s.[Name] like '%frame%'

-------------------------------------------
select distinct sp.BusinessEntityID
from Sales.SalesPerson as sp
	left join Sales.SalesOrderHeader as h
		on sp.BusinessEntityID = h.SalesPersonID
			left join Sales.SalesOrderDetail as d
				on h.SalesOrderID = d.SalesOrderID
					left join Production.Product as p
						on d.ProductID = p.ProductID
							left join Production.ProductModel as m
								on p.ProductModelID = m.ProductModelID
where m.[Name] like '%frame%'

----------------------------------------------------
select *
from Sales.SalesPerson s
where exists	(
					select *
					from	Sales.SalesOrderHeader h
						join Sales.SalesOrderDetail d
							on h.SalesOrderID = d.SalesOrderID
						join Production.Product p
							on d.ProductID = p.ProductID
						join Production.ProductModel m
							on p.ProductModelID = m.ProductModelID
					where	m.[Name] like '%frame%'
							and s.BusinessEntityID = h.SalesPersonID
				)
order by s.BusinessEntityID 

/*"Write a query that displays a line for each month of the year (i.e., a line for each of
the months: January 2011, February 2011 ... January 2012, February 2012...), and
rank the months of each year separately according to the total sales (SubTotal) in
that month. (2011 has its own ranking, and the ranking starts again for 2012.)
Sort the query results by year, and ranking.*/

select
	YEAR(OrderDate) as Año,
	MONTH(OrderDate) as Mes,
	SUM(SubTotal) as TotalSales,
	RANK() over(partition by YEAR(OrderDate)
				order by SUM(SubTotal) desc
				) as MonthRank
from Sales.SalesOrderHeader
group by YEAR(OrderDate), MONTH(OrderDate)
order by YEAR(OrderDate), MonthRank

/*Continuing from the previous question, copy the query code, replace the ranking
function with the percent_rank() function and run the query.
(This function does not turn pink, which is fine.)
Replace the sorting within the ranking to ascending.
What is the significance of the ranking?"*/

select
	YEAR(OrderDate) as Año,
	MONTH(OrderDate) as Mes,
	SUM(SubTotal) as TotalSales,
	PERCENT_RANK() over(partition by YEAR(OrderDate)
				order by SUM(SubTotal) 
				) as MonthRank
from Sales.SalesOrderHeader
group by YEAR(OrderDate), MONTH(OrderDate)
order by YEAR(OrderDate), MonthRank

select
	YEAR(OrderDate) as Año,
	MONTH(OrderDate) as Mes,
	SUM(SubTotal) as TotalSales,
	RANK() over(partition by YEAR(OrderDate)
				order by SUM(SubTotal) desc
				) as MonthRank
from Sales.SalesOrderHeader
group by YEAR(OrderDate), MONTH(OrderDate)
order by YEAR(OrderDate), MonthRank



